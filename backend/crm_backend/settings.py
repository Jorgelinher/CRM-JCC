"""
Django settings for crm_backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # Añadir esta importación
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z!j-!t^o0_7s@&6b8^i!o-7(800w5!_g(d2w!#q21z6#$b#z7p' # Change this in production!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',              # Para manejar las politicas CORS
    'rest_framework',           # Django REST Framework
    'leads',                    # Tu aplicacion de leads
    'rest_framework_simplejwt', # Para la autenticacion JWT
    'django_filters',           # Para filtros en la API
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Debe ir lo mas alto posible, despues de SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'crm_backend.middleware.CurrentUserMiddleware', # Tu middleware personalizado para el usuario actual
]

ROOT_URLCONF = 'crm_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'crm_inmobiliario_db',
        'USER': 'jorge',
        'PASSWORD': 'jorge123',
        'HOST': 'localhost',
        'PORT': '5432',
        'OPTIONS': {
            'client_encoding': 'UTF8'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-pe'  # Spanish (Peru)

TIME_ZONE = 'America/Lima'  # Your timezone for precise date/time handling

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom User Model
# Le dice a Django que use nuestro modelo User personalizado en la aplicacion 'leads'
AUTH_USER_MODEL = 'leads.User'  # Uses custom User model from leads app


# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT API authentication
        'rest_framework.authentication.SessionAuthentication',        # Django Admin panel
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Authentication required by default
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',  # Enable API filters
    ),
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10, # Define el número de elementos por página por defecto (ej. 10 leads)
}



# CORS Configuration
# Especifica los origenes (dominios/puertos) permitidos para las solicitudes CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React frontend
    "http://127.0.0.1:3000",   # Alternative localhost
]

# Si estuvieras en produccion, usarias los dominios reales:
# CORS_ALLOWED_ORIGINS = [
#     "https://crm.tu-dominio.com",
#     "https://api.tu-dominio.com",
# ]

# Para desarrollo, una opcion menos segura pero mas flexible es permitir todos los origenes
# CORS_ALLOW_ALL_ORIGINS = True # Usar solo en desarrollo, deshabilitar en produccion

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Ajustar según tu necesidad
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # Ajustar según tu necesidad
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    # APUNTA A TU SERIALIZADOR PERSONALIZADO AQUÍ
    'TOKEN_OBTAIN_SERIALIZER': 'leads.serializers.MyTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
    'TOKEN_VERIFY_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenVerifySerializer',
    'TOKEN_BLACKLIST_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenBlacklistSerializer',
}

# --- CONFIGURACIÓN DE INTEGRACIÓN CON APP COMERCIAL ---
# URL del endpoint webhook de la app comercial
COMERCIAL_WEBHOOK_URL = os.environ.get('COMERCIAL_WEBHOOK_URL', 'http://localhost:8000/api/gestion/webhook-presencia-crm/')

# Token de autenticación para el webhook (debe coincidir con CRM_WEBHOOK_TOKEN en la app comercial)
COMERCIAL_WEBHOOK_TOKEN = os.environ.get('COMERCIAL_WEBHOOK_TOKEN', 'jcc-webhook-secret-token-2024')